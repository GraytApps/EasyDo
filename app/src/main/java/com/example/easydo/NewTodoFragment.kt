package com.example.easydo

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.repeatOnLifecycle
import androidx.navigation.fragment.findNavController
import com.example.easydo.databinding.FragmentNewTodoBinding
import com.example.easydo.util.TodoValidationStatus
import com.example.easydo.viewmodel.NewTodoViewModel
import com.google.android.material.appbar.MaterialToolbar
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.launch

@AndroidEntryPoint
class NewTodoFragment : Fragment() {

    private var _binding: FragmentNewTodoBinding? = null
    private val viewModel: NewTodoViewModel by viewModels()

    // This property is only valid between onCreateView and
    // onDestroyView.
    private val binding get() = _binding!!

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {

        _binding = FragmentNewTodoBinding.inflate(inflater, container, false)
        return binding.root

    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        viewLifecycleOwner.lifecycleScope.launch {
            repeatOnLifecycle(Lifecycle.State.STARTED) {
                viewModel.newTodoUiState.collect { state ->
                    // Show validation status of attempted save
                    state.validationStatus?.let {
                        showTodoValidationAlert(it)
                        viewModel.validationAlertShown()
                    }

                    // Populate todo item if user is editing an existing todo item
                    state.editingTodo?.let {
                        binding.titleTextView.setText(it.title)
                        binding.descTextView.setText(it.description)
                    }

                    // Make UI changes based on whether user is editing or creating a todo item
                    val toolbar = requireActivity().findViewById<MaterialToolbar>(R.id.toolbar)
                    if (state.editingTodo == null) {
                        toolbar.title = getString(R.string.new_todo_fragment_label)
                        binding.completedCheckBox.visibility = View.GONE
                    } else {
                        toolbar.title = getString(R.string.edit_todo_fragment_label)
                        binding.completedCheckBox.visibility = View.VISIBLE
                        binding.completedCheckBox.isChecked = state.editingTodo.completed // editingTodo will never be null here
                    }
                }
            }
        }

        // Manually querying arguments since for some reason no NewTodoFragmentArgs file was being generated by safeArgs plugin
        arguments?.let {
            val todoId = it.getString("todo_id")
            if (todoId?.isNotEmpty() == true) {  // Has to match argument id declared in nav_graph
                viewModel.editTodo(todoId)
            }
        }

        binding.completedCheckBox.setOnCheckedChangeListener { _, checked ->
            viewModel.setTodoCompleted(checked)
        }

        requireActivity().findViewById<Button>(R.id.button_save).setOnClickListener {
            if (viewModel.saveTodo(
                title = binding.titleTextView.text.toString(),
                description = binding.descTextView.text.toString()
            )) {
                findNavController().navigate(NewTodoFragmentDirections.actionNewTodoFragmentToHomeFragment())
            }
        }
    }

    private fun showTodoValidationAlert(validationStatus: TodoValidationStatus) {
        MaterialAlertDialogBuilder(requireContext())
            .setTitle(resources.getString(R.string.alert_empty_todo_title))
            .setMessage(resources.getString(R.string.alert_empty_todo_message))
            .setPositiveButton(resources.getString(R.string.ok)) { _, _ -> }
            .show()
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}